@model AspNet.MVC.Controls.Sample.Models.TestViewModel
@{
    ViewBag.Title = "AjaxDropDownList";
    SelectListItem optionItem = new SelectListItem() { Text = "Please select", Value = "0" };
}

<div class="row">
    <div class="col">
        <h2>AjaxDropDownList</h2>
        <p>The AjaxDropDownList actually does what its name says - it loads the option items via ajax call. The controller action must return a json array with text/value pairs, which
        can be achived by simply turning an array of SelectListItem into a json result.
        <br /><br />However, this solution makes an ajax call for every drop down on the page - if you have many of them on one page, may be even with many option items, it can lead to lots
        of requests.
        </p>
        <div class="form-group">
            @Html.LabelFor(model => model.Option1, htmlAttributes: new { @class = "control-label" })
            @Html.AjaxDropDownListFor(model => model.Option1, Url.Action("Options", "DropDown"), optionItem, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Option1)
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Option2, htmlAttributes: new { @class = "control-label" })
            @Html.AjaxDropDownListFor(model => model.Option2, Url.Action("Options", "DropDown"), optionItem, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Option2)
        </div>
    </div>
    <div class="col">
        <h2>ScriptDropDownList</h2>
        <p>
            The ScriptDropDownList acts similar then the AjaxDropDownList - it also gets a read url as parameter. But the data is not read by an ajax call but during the rendering process
            of the page. The controller action must return a ScriptDropDownResult. This type is inherited from the ActionResult and basically renders a small piece of java script including an
            array with the option items. This does not lead to extra requests.
            <br /><br />This approach is even smart enough to figure out if two or more drop downs read their data from the same url. In this case the controller action is executed only once,
            and the data array is reused.
        </p>
        <div class="form-group">
            @Html.LabelFor(model => model.Option3, htmlAttributes: new { @class = "control-label" })
            @Html.ScriptDropDownListFor(model => model.Option3, Url.Action("Options2", "DropDown"), optionItem, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Option3)
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Option4, htmlAttributes: new { @class = "control-label" })
            @Html.ScriptDropDownListFor(model => model.Option4, Url.Action("Options2", "DropDown"), optionItem, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Option4)
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Option5, htmlAttributes: new { @class = "control-label" })
            @Html.ScriptDropDownListFor(model => model.Option5, Url.Action("Options3", "DropDown"), optionItem, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Option5)
        </div>
    </div>
</div>
